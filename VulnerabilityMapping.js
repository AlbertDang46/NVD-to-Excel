/*****************************************
VULNERABILITY MAPPING
******************************************/

const VUL_FOLDER = "./vulnerabilities/";
const EXCEL_FOLDER = "./vul_excel_sheets/";

if(process.argv[2] === undefined) {
    console.log("Must provide NVD filename!");
    process.exit(1);
}

let nvdFilename = VUL_FOLDER + process.argv[2];

const excel = require("exceljs/modern.nodejs");
const fs = require("fs");
const path = require('path');

let workbook = new excel.Workbook();
let worksheet = workbook.addWorksheet("VulnerabilitySheet");
worksheet.addRow(["CVE_ID", "Vector_String", "Attack_Vector", "Attack_Complexity", 
                  "Privileges_Required", "User_Interaction", "Scope", "Confidentiality_Impact", 
                  "Integrity_Impact", "Availability_Impact", "Base_Score", "Base_Severity", 
                  "Exploitability_Score", "Impact_Score", "Vendor_Name", "Product_Name", "Versions"]);

fs.readFile(nvdFilename, "utf8", function(err, data) {
    let vulnerabilitiesJSON = JSON.parse(data);

    vulnerabilitiesJSON.CVE_Items.forEach((item) => {
        let cve_id = "";       
        let vector_string = "";
        let attack_vector = "";
        let attack_complexity = "";
        let privileges_required = "";
        let user_interaction = "";
        let scope = "";
        let confidentiality_impact = "";
        let integrity_impact = "";
        let availability_impact = "";
        let base_score = "";
        let base_severity = "";
        let exploitability_score = "";
        let impact_score = "";
        let vendor_name = "";
        let product_name = "";
        let versions = [];

        cve_id = item.cve.CVE_data_meta.ID; 

        if(item.impact.hasOwnProperty("baseMetricV3"))
        {
            let cvssV3 = item.impact.baseMetricV3.cvssV3;

            vector_string = cvssV3.vectorString;
            attack_vector = cvssV3.attackVector;
            attack_complexity = cvssV3.attackComplexity;
            privileges_required = cvssV3.privilegesRequired;
            user_interaction = cvssV3.userInteraction;
            scope = cvssV3.scope;
            confidentiality_impact = cvssV3.confidentialityImpact;
            integrity_impact = cvssV3.integrityImpact;
            availability_impact = cvssV3.availabilityImpact;
            base_score = cvssV3.baseScore;
            base_severity = cvssV3.baseSeverity;
            exploitability_score = item.impact.baseMetricV3.exploitabilityScore;
            impact_score = item.impact.baseMetricV3.impactScore;
        }

        let vendor_data = item.cve.affects.vendor.vendor_data;
        if(vendor_data.length)
        {
            vendor_name = vendor_data[0].vendor_name.replace(/_/g, " ");
            product_name = vendor_data[0].product.product_data[0].product_name.replace(/_/g, " ");
            versions = vendor_data[0].product.product_data[0].version.version_data.map((v_num) => {
                if(v_num.version_value.localeCompare("*") == 0 || v_num.version_value.localeCompare("-") == 0) {
                    return "";
                }
                return v_num.version_value;
            });
        }
        
        if(process.argv[3] === "--log")
        {
            console.log("CVE ID: " + cve_id);
            console.log("Vector String: " + vector_string);
            console.log("Attack Vector: " + attack_vector);
            console.log("Attack Complexity: " + attack_complexity);
            console.log("Privileges Required: " + privileges_required);
            console.log("User Interaction: " + user_interaction);
            console.log("Scope: " + scope);
            console.log("Confidentiality Impact: " + confidentiality_impact);
            console.log("Integrity Impact: " + integrity_impact);
            console.log("Availability Impact: " + availability_impact);
            console.log("Base Score: " + base_score);
            console.log("Base Severity: " + base_severity);
            console.log("Exploitability Score: " + exploitability_score);
            console.log("Impact Score: " + impact_score);
            console.log("Vendor Name: " + vendor_name);
            console.log("Product Name: " + product_name);
            console.log("Versions Affected: ");
            versions.forEach((version_value) => {
                console.log(version_value);
            });
            console.log("\n");
        }

        worksheet.addRow([cve_id, vector_string, attack_vector, attack_complexity, 
                          privileges_required, user_interaction, scope, confidentiality_impact, 
                          integrity_impact, availability_impact, base_score, base_severity, 
                          exploitability_score, impact_score, vendor_name, product_name, ...versions]);
    });

    let excelFilename = EXCEL_FOLDER + path.parse(nvdFilename).name + ".xlsx";

    workbook.xlsx.writeFile(excelFilename);
});